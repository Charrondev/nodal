"use strict";
const colors = require('colors/safe');
const DEFAULT_ADAPTER = 'postgres';
const ADAPTERS = {
    postgres: './adapters/postgres.js'
};
const postgres_1 = require('./adapters/postgres');
class Database {
    constructor() {
        this.adapter = null;
        this._useLogColor = 0;
    }
    connect(cfg) {
        if (typeof cfg === 'string') {
            cfg = { connectionString: cfg };
        }
        // const Adapter = require(ADAPTERS[cfg.adapter] || ADAPTERS[DEFAULT_ADAPTER]).default;
        this.adapter = new postgres_1.default(this, cfg);
        return true;
    }
    close(callback) {
        this.adapter.close.apply(this, arguments);
        callback && callback.call(this);
        return true;
    }
    log(sql, params, time) {
        const colorFunc = this.__logColorFuncs[this._useLogColor];
        console.log();
        console.log(colorFunc(sql));
        params && console.log(colorFunc(JSON.stringify(params)));
        time && console.log(colorFunc(time + 'ms'));
        console.log();
        this._useLogColor = ((this._useLogColor + 1) % this.__logColorFuncs.length);
        return true;
    }
    info(message) {
        console.log(colors.green.bold('Database Info: ') + message);
    }
    error(message) {
        console.log(colors.red.bold('Database Error: ') + message);
        return true;
    }
    query(...args) {
        this.adapter.query.apply(this.adapter, arguments);
    }
    transaction(...args) {
        this.adapter.transaction.apply(this.adapter, args);
    }
    drop() {
        this.adapter.drop.apply(this.adapter, arguments);
    }
    create() {
        this.adapter.create.apply(this.adapter, arguments);
    }
}
Database.prototype.__logColorFuncs = [
        (str) => {
        return colors.yellow.bold(str);
    },
        (str) => {
        return colors.white(str);
    }
];
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Database;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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T0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVuRCxDQUFDO0lBRU0sTUFBTTtRQUVYLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRXJELENBQUM7QUFFSCxDQUFDO0FBRUQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUc7SUFDbkMsS0FBQyxHQUFXO1FBQ1YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxLQUFDLEdBQVc7UUFDVixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0YsQ0FBQztBQUVGO2tCQUFlLFFBQVEsQ0FBQyIsImZpbGUiOiJkYi9kYXRhYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbG9ycyA9IHJlcXVpcmUoJ2NvbG9ycy9zYWZlJyk7XG5cbmNvbnN0IERFRkFVTFRfQURBUFRFUiA9ICdwb3N0Z3Jlcyc7XG5jb25zdCBBREFQVEVSUzoge1xuICBbaXRlbTogc3RyaW5nXTogc3RyaW5nO1xufSA9IHtcbiAgcG9zdGdyZXM6ICcuL2FkYXB0ZXJzL3Bvc3RncmVzLmpzJ1xufTtcblxuaW1wb3J0IFBvc3RncmVzQWRhcHRlciBmcm9tICcuL2FkYXB0ZXJzL3Bvc3RncmVzJztcblxuY2xhc3MgRGF0YWJhc2Uge1xuXG4gIHB1YmxpYyBhZGFwdGVyOiBhbnk7XG4gIHB1YmxpYyBfX2xvZ0NvbG9yRnVuY3M6IEZ1bmN0aW9uW107XG4gIHByaXZhdGUgX3VzZUxvZ0NvbG9yOiAwIHwgMTtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMuYWRhcHRlciA9IG51bGw7XG4gICAgdGhpcy5fdXNlTG9nQ29sb3IgPSAwO1xuXG4gIH1cblxuICBwdWJsaWMgY29ubmVjdChjZmc6IGFueSkge1xuXG4gICAgaWYgKHR5cGVvZiBjZmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjZmcgPSB7Y29ubmVjdGlvblN0cmluZzogY2ZnfTtcbiAgICB9XG5cbiAgICAvLyBjb25zdCBBZGFwdGVyID0gcmVxdWlyZShBREFQVEVSU1tjZmcuYWRhcHRlcl0gfHwgQURBUFRFUlNbREVGQVVMVF9BREFQVEVSXSkuZGVmYXVsdDtcbiAgICB0aGlzLmFkYXB0ZXIgPSBuZXcgUG9zdGdyZXNBZGFwdGVyKHRoaXMsIGNmZyk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9XG5cbiAgcHVibGljIGNsb3NlKGNhbGxiYWNrOiBGdW5jdGlvbikge1xuXG4gICAgdGhpcy5hZGFwdGVyLmNsb3NlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9XG5cbiAgcHVibGljIGxvZyhzcWw6IHN0cmluZywgcGFyYW1zPzogYW55LCB0aW1lPzogbnVtYmVyKSB7XG5cbiAgICBjb25zdCBjb2xvckZ1bmMgPSB0aGlzLl9fbG9nQ29sb3JGdW5jc1t0aGlzLl91c2VMb2dDb2xvcl07XG5cbiAgICBjb25zb2xlLmxvZygpO1xuICAgIGNvbnNvbGUubG9nKGNvbG9yRnVuYyhzcWwpKTtcbiAgICBwYXJhbXMgJiYgY29uc29sZS5sb2coY29sb3JGdW5jKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpKTtcbiAgICB0aW1lICYmIGNvbnNvbGUubG9nKGNvbG9yRnVuYyh0aW1lICsgJ21zJykpO1xuICAgIGNvbnNvbGUubG9nKCk7XG5cbiAgICB0aGlzLl91c2VMb2dDb2xvciA9IDwwIHwgMT4oKHRoaXMuX3VzZUxvZ0NvbG9yICsgMSkgJSB0aGlzLl9fbG9nQ29sb3JGdW5jcy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHB1YmxpYyBpbmZvKG1lc3NhZ2U6IHN0cmluZykge1xuXG4gICAgY29uc29sZS5sb2coY29sb3JzLmdyZWVuLmJvbGQoJ0RhdGFiYXNlIEluZm86ICcpICsgbWVzc2FnZSk7XG5cbiAgfVxuXG4gIHB1YmxpYyBlcnJvcihtZXNzYWdlOiBzdHJpbmcpIHtcblxuICAgIGNvbnNvbGUubG9nKGNvbG9ycy5yZWQuYm9sZCgnRGF0YWJhc2UgRXJyb3I6ICcpICsgbWVzc2FnZSk7XG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHB1YmxpYyBxdWVyeSguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuXG4gICAgdGhpcy5hZGFwdGVyLnF1ZXJ5LmFwcGx5KHRoaXMuYWRhcHRlciwgYXJndW1lbnRzKTtcblxuICB9XG5cbiAgcHVibGljIHRyYW5zYWN0aW9uKC4uLmFyZ3M6IGFueVtdKSB7XG5cbiAgICB0aGlzLmFkYXB0ZXIudHJhbnNhY3Rpb24uYXBwbHkodGhpcy5hZGFwdGVyLCBhcmdzKTtcblxuICB9XG5cbiAgcHVibGljIGRyb3AoKSB7XG5cbiAgICB0aGlzLmFkYXB0ZXIuZHJvcC5hcHBseSh0aGlzLmFkYXB0ZXIsIGFyZ3VtZW50cyk7XG5cbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGUoKSB7XG5cbiAgICB0aGlzLmFkYXB0ZXIuY3JlYXRlLmFwcGx5KHRoaXMuYWRhcHRlciwgYXJndW1lbnRzKTtcblxuICB9XG5cbn1cblxuRGF0YWJhc2UucHJvdG90eXBlLl9fbG9nQ29sb3JGdW5jcyA9IFtcbiAgKHN0cjogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGNvbG9ycy55ZWxsb3cuYm9sZChzdHIpO1xuICB9LFxuICAoc3RyOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gY29sb3JzLndoaXRlKHN0cik7XG4gIH1cbl07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFiYXNlO1xuIl19

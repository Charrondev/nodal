"use strict";
const inflect = require('i')();
let __id__ = 0;
class RelationshipPath {
    constructor(path) {
        this.path = path;
    }
    toString() {
        return this.path.join(' <-> ');
    }
    joinName(reverse = false) {
        let path = [].slice.call(this.path);
        if (reverse) {
            path = path.reverse();
        }
        const names = [];
        while (path.length > 1) {
            const node = path.pop();
            const edge = path.pop();
            names.push(edge.hasChild(node) ? edge.options.name : edge.options.as);
        }
        return names.join('__');
    }
    add(node, edge) {
        return new this.constructor([node, edge].concat(this.path));
    }
    getModel() {
        return this.path[0].Model;
    }
    multiple() {
        for (let i = 1; i < this.path.length; i += 2) {
            const edge = this.path[i];
            const node = this.path[i - 1];
            if (edge.hasChild(node) && edge.options.multiple) {
                return true;
            }
        }
        return false;
    }
    immediateMultiple() {
        const node = this.path[0];
        const edge = this.path[1];
        if (edge.hasChild(node) && edge.options.multiple) {
            return true;
        }
        return false;
    }
    joins(alias, firstTable) {
        let node;
        let i = 0;
        return this.path.slice().reverse().reduce((joins, item) => {
            if (item instanceof RelationshipNode) {
                node = item;
                return joins;
            }
            const edge = item;
            const opposite = edge.opposite(node);
            const join = {
                joinTable: opposite && opposite.Model.table(),
                prevTable: joins[joins.length - 1] ? joins[joins.length - 1].joinAlias : (firstTable || null)
            };
            if (edge.hasChild(node)) {
                join.prevColumn = edge.options.via;
                join.joinColumn = 'id';
                join.joinAlias = edge.options.name;
            }
            else {
                join.prevColumn = 'id';
                join.joinColumn = edge.options.via;
                join.joinAlias = edge.options.as;
            }
            join.joinAlias = alias ? `${alias}${++i}` : join.joinAlias;
            joins.push(join);
            return joins;
        }, []);
    }
}
exports.RelationshipPath = RelationshipPath;
class RelationshipNode {
    constructor(Graph, mModel) {
        this.Graph = Graph;
        this.Model = mModel;
        this.edges = [];
    }
    toString() {
        return `[Node: ${this.Model.name}]`;
    }
    joinsTo(mModel, options) {
        if (!mModel.name) {
            // Sanity check for circular dependency resolution
            return null;
        }
        options = options || {};
        options.multiple = !!options.multiple;
        options.as = options.as || (options.multiple ?
            `${inflect.pluralize(inflect.camelize(this.Model.name, false))}` :
            `${inflect.camelize(this.Model.name, false)}`);
        options.name = options.name || `${inflect.camelize(mModel.name, false)}`;
        options.via = options.via || `${inflect.underscore(options.name)}_id`;
        const parentNode = this.Graph.of(mModel);
        let edge = this.edges.filter(e => e.parent === parentNode && e.options.name === options.name).pop();
        if (!edge) {
            edge = new RelationshipEdge(parentNode, this, options);
        }
        return edge;
    }
    childEdges() {
        return this.edges.filter(edge => edge.parent === this);
    }
    cascade() {
        let queue = this.childEdges();
        let paths = queue.map(e => new RelationshipPath([e.child, e, e.parent]));
        let i = 0;
        while (queue.length) {
            const edge = queue.shift();
            const curPath = paths[i++];
            const nextEdges = edge.child.childEdges();
            queue = queue.concat(nextEdges);
            paths = paths.concat(nextEdges.map(e => curPath.add(e.child, e)));
        }
        return paths;
    }
    findExplicit(pathname) {
        const names = pathname.split('__');
        let node = this;
        let path = new RelationshipPath([node]);
        while (names.length) {
            const name = names.shift();
            const edges = node.edges.filter(edge => {
                return (edge.hasChild(node) && edge.options.name === name) || edge.options.as === name;
            });
            if (edges.length === 0) {
                return null;
            }
            const edge = edges.pop();
            const nextNode = edge.opposite(node);
            // nextNode could be null
            path = path.add(nextNode, edge);
            node = nextNode;
        }
        return path;
    }
    find(name) {
        let queue = this.edges
            .slice()
            .map(edge => {
            return { edge: edge, path: new RelationshipPath([this]) };
        });
        const traversed = {};
        while (queue.length) {
            const item = queue[0];
            const curEdge = item.edge;
            const path = item.path;
            let node;
            traversed[curEdge.id] = true;
            const curNode = path.path[0];
            node = curEdge.opposite(curNode);
            if ((curEdge.hasChild(curNode) && curEdge.options.name === name) || curEdge.options.as === name) {
                return path.add(node, curEdge);
            }
            queue = queue.slice(1).concat(node.edges
                .filter((edge) => !traversed[edge.id])
                .map((edge) => {
                return {
                    edge: edge,
                    path: path.add(node, curEdge)
                };
            }));
        }
        return null;
    }
}
exports.RelationshipNode = RelationshipNode;
class RelationshipEdge {
    constructor(parent, child, options) {
        this.id = ++__id__;
        this.parent = parent;
        this.child = child;
        this.options = options;
        parent.edges.push(this);
        child.edges.push(this);
    }
    toString() {
        return `[Edge: ${this.parent.Model.name}, ${this.child.Model.name}]`;
    }
    hasChild(child) {
        return this.child === child;
    }
    hasParent(parent) {
        return this.parent === parent;
    }
    opposite(node) {
        return this.child === node ? this.parent : (this.parent === node ? this.child : null);
    }
}
exports.RelationshipEdge = RelationshipEdge;
class RelationshipGraph {
    constructor() {
        this.nodes = [];
        this.edges = [];
    }
    of(mModel) {
        let node = this.nodes.filter(n => n.Model === mModel).pop();
        if (!node) {
            node = new RelationshipNode(this, mModel);
            this.nodes.push(node);
        }
        return node;
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RelationshipGraph;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDNUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxHQUFHLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRWQsQ0FBQztBQUVILENBQUM7QUF0QkQ7bUNBc0JDLENBQUEiLCJmaWxlIjoicmVsYXRpb25zaGlwX2dyYXBoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaW5mbGVjdDogYW55ID0gcmVxdWlyZSgnaScpKCk7XG5sZXQgX19pZF9fOiBudW1iZXIgPSAwO1xuaW1wb3J0IE1vZGVsIGZyb20gJy4vbW9kZWwnO1xuaW1wb3J0IHtJSm9pbn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnMge1xuICBuYW1lOiBzdHJpbmc7XG4gIG11bHRpcGxlOiBib29sZWFuO1xuICBhczogc3RyaW5nO1xuICB2aWE6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFJlbGF0aW9uc2hpcFBhdGgge1xuXG4gIHByaXZhdGUgJ2NvbnN0cnVjdG9yJzogdHlwZW9mIFJlbGF0aW9uc2hpcFBhdGg7XG4gIHB1YmxpYyBwYXRoOiAoUmVsYXRpb25zaGlwRWRnZSB8IFJlbGF0aW9uc2hpcE5vZGUpW107XG5cbiAgY29uc3RydWN0b3IocGF0aDogKFJlbGF0aW9uc2hpcEVkZ2UgfCBSZWxhdGlvbnNoaXBOb2RlKVtdKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5wYXRoLmpvaW4oJyA8LT4gJyk7XG4gIH1cblxuICBwdWJsaWMgam9pbk5hbWUocmV2ZXJzZTogYm9vbGVhbiA9IGZhbHNlKSB7XG5cbiAgICBsZXQgcGF0aCA9IFtdLnNsaWNlLmNhbGwodGhpcy5wYXRoKTtcblxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICBwYXRoID0gcGF0aC5yZXZlcnNlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICB3aGlsZSAocGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBub2RlID0gcGF0aC5wb3AoKTtcbiAgICAgIGNvbnN0IGVkZ2UgPSBwYXRoLnBvcCgpO1xuICAgICAgbmFtZXMucHVzaChlZGdlLmhhc0NoaWxkKG5vZGUpID8gZWRnZS5vcHRpb25zLm5hbWUgOiBlZGdlLm9wdGlvbnMuYXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lcy5qb2luKCdfXycpO1xuXG4gIH1cblxuICBwdWJsaWMgYWRkKG5vZGU6IFJlbGF0aW9uc2hpcE5vZGUsIGVkZ2U6IFJlbGF0aW9uc2hpcEVkZ2UpIHtcblxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihbbm9kZSwgZWRnZV0uY29uY2F0KHRoaXMucGF0aCkpO1xuICB9XG5cbiAgcHVibGljIGdldE1vZGVsKCkge1xuICAgIHJldHVybiAoPFJlbGF0aW9uc2hpcE5vZGU+IHRoaXMucGF0aFswXSkuTW9kZWw7XG4gIH1cblxuICBwdWJsaWMgbXVsdGlwbGUoKSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIGNvbnN0IGVkZ2UgPSA8UmVsYXRpb25zaGlwRWRnZT4gdGhpcy5wYXRoW2ldO1xuICAgICAgY29uc3Qgbm9kZSA9IDxSZWxhdGlvbnNoaXBOb2RlPiB0aGlzLnBhdGhbaSAtIDFdO1xuICAgICAgaWYgKGVkZ2UuaGFzQ2hpbGQobm9kZSkgJiYgZWRnZS5vcHRpb25zLm11bHRpcGxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgaW1tZWRpYXRlTXVsdGlwbGUoKSB7XG4gICAgY29uc3Qgbm9kZSA9IDxSZWxhdGlvbnNoaXBOb2RlPnRoaXMucGF0aFswXTtcbiAgICBjb25zdCBlZGdlID0gPFJlbGF0aW9uc2hpcEVkZ2U+IHRoaXMucGF0aFsxXTtcbiAgICBpZiAoZWRnZS5oYXNDaGlsZChub2RlKSAmJiBlZGdlLm9wdGlvbnMubXVsdGlwbGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgam9pbnMoYWxpYXM/OiBzdHJpbmcgfCBudWxsLCBmaXJzdFRhYmxlPzogc3RyaW5nKTogSUpvaW5bXSB7XG5cbiAgICBsZXQgbm9kZTogUmVsYXRpb25zaGlwTm9kZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmV0dXJuIHRoaXMucGF0aC5zbGljZSgpLnJldmVyc2UoKS5yZWR1Y2UoKGpvaW5zOiBJSm9pbltdLCBpdGVtOiBhbnkpID0+IHtcblxuICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBSZWxhdGlvbnNoaXBOb2RlKSB7XG4gICAgICAgIG5vZGUgPSBpdGVtO1xuICAgICAgICByZXR1cm4gam9pbnM7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVkZ2UgPSA8UmVsYXRpb25zaGlwRWRnZT4gaXRlbTtcblxuICAgICAgY29uc3Qgb3Bwb3NpdGUgPSBlZGdlLm9wcG9zaXRlKG5vZGUpO1xuICAgICAgY29uc3Qgam9pbjogYW55ID0ge1xuICAgICAgICBqb2luVGFibGU6IG9wcG9zaXRlICYmIG9wcG9zaXRlLk1vZGVsLnRhYmxlKCksXG4gICAgICAgIHByZXZUYWJsZTogam9pbnNbam9pbnMubGVuZ3RoIC0gMV0gPyBqb2luc1tqb2lucy5sZW5ndGggLSAxXS5qb2luQWxpYXMgOiAoZmlyc3RUYWJsZSB8fCBudWxsKVxuICAgICAgfTtcblxuICAgICAgaWYgKGVkZ2UuaGFzQ2hpbGQobm9kZSkpIHtcbiAgICAgICAgam9pbi5wcmV2Q29sdW1uID0gZWRnZS5vcHRpb25zLnZpYTtcbiAgICAgICAgam9pbi5qb2luQ29sdW1uID0gJ2lkJztcbiAgICAgICAgam9pbi5qb2luQWxpYXMgPSBlZGdlLm9wdGlvbnMubmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvaW4ucHJldkNvbHVtbiA9ICdpZCc7XG4gICAgICAgIGpvaW4uam9pbkNvbHVtbiA9IGVkZ2Uub3B0aW9ucy52aWE7XG4gICAgICAgIGpvaW4uam9pbkFsaWFzID0gZWRnZS5vcHRpb25zLmFzO1xuICAgICAgfVxuXG4gICAgICBqb2luLmpvaW5BbGlhcyA9IGFsaWFzID8gYCR7YWxpYXN9JHsrK2l9YCA6IGpvaW4uam9pbkFsaWFzO1xuXG4gICAgICBqb2lucy5wdXNoKGpvaW4pO1xuXG4gICAgICByZXR1cm4gam9pbnM7XG5cbiAgICB9LCBbXSk7XG5cbiAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBSZWxhdGlvbnNoaXBOb2RlIHtcblxuICBwdWJsaWMgR3JhcGg6IFJlbGF0aW9uc2hpcEdyYXBoO1xuICBwdWJsaWMgTW9kZWw6IHR5cGVvZiBNb2RlbDtcbiAgcHVibGljIGVkZ2VzOiBSZWxhdGlvbnNoaXBFZGdlW107XG5cbiAgY29uc3RydWN0b3IoR3JhcGg6IFJlbGF0aW9uc2hpcEdyYXBoLCBtTW9kZWw6IHR5cGVvZiBNb2RlbCkge1xuICAgIHRoaXMuR3JhcGggPSBHcmFwaDtcbiAgICB0aGlzLk1vZGVsID0gbU1vZGVsO1xuICAgIHRoaXMuZWRnZXMgPSBbXTtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYFtOb2RlOiAke3RoaXMuTW9kZWwubmFtZX1dYDtcbiAgfVxuXG4gIHB1YmxpYyBqb2luc1RvKG1Nb2RlbDogdHlwZW9mIE1vZGVsLCBvcHRpb25zOiBJT3B0aW9ucykge1xuXG4gICAgaWYgKCFtTW9kZWwubmFtZSkge1xuICAgICAgLy8gU2FuaXR5IGNoZWNrIGZvciBjaXJjdWxhciBkZXBlbmRlbmN5IHJlc29sdXRpb25cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgb3B0aW9ucy5tdWx0aXBsZSA9ICEhb3B0aW9ucy5tdWx0aXBsZTtcbiAgICBvcHRpb25zLmFzID0gb3B0aW9ucy5hcyB8fCAob3B0aW9ucy5tdWx0aXBsZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aW5mbGVjdC5wbHVyYWxpemUoaW5mbGVjdC5jYW1lbGl6ZSh0aGlzLk1vZGVsLm5hbWUsIGZhbHNlKSl9YCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7aW5mbGVjdC5jYW1lbGl6ZSh0aGlzLk1vZGVsLm5hbWUsIGZhbHNlKX1gKTtcbiAgICBvcHRpb25zLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgYCR7aW5mbGVjdC5jYW1lbGl6ZShtTW9kZWwubmFtZSwgZmFsc2UpfWA7XG4gICAgb3B0aW9ucy52aWEgPSBvcHRpb25zLnZpYSB8fCBgJHtpbmZsZWN0LnVuZGVyc2NvcmUob3B0aW9ucy5uYW1lKX1faWRgO1xuXG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IHRoaXMuR3JhcGgub2YobU1vZGVsKTtcbiAgICBsZXQgZWRnZSA9IHRoaXMuZWRnZXMuZmlsdGVyKGUgPT4gZS5wYXJlbnQgPT09IHBhcmVudE5vZGUgJiYgZS5vcHRpb25zLm5hbWUgPT09IG9wdGlvbnMubmFtZSkucG9wKCk7XG5cbiAgICBpZiAoIWVkZ2UpIHtcbiAgICAgIGVkZ2UgPSBuZXcgUmVsYXRpb25zaGlwRWRnZShwYXJlbnROb2RlLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWRnZTtcblxuICB9XG5cbiAgcHVibGljIGNoaWxkRWRnZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGVkZ2UgPT4gZWRnZS5wYXJlbnQgPT09IHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGNhc2NhZGUoKSB7XG5cbiAgICBsZXQgcXVldWUgPSB0aGlzLmNoaWxkRWRnZXMoKTtcbiAgICBsZXQgcGF0aHMgPSBxdWV1ZS5tYXAoZSA9PiBuZXcgUmVsYXRpb25zaGlwUGF0aChbZS5jaGlsZCwgZSwgZS5wYXJlbnRdKSk7XG5cbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXG4gICAgICBjb25zdCBlZGdlID0gPFJlbGF0aW9uc2hpcEVkZ2U+IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICBjb25zdCBjdXJQYXRoID0gcGF0aHNbaSsrXTtcblxuICAgICAgY29uc3QgbmV4dEVkZ2VzID0gZWRnZS5jaGlsZC5jaGlsZEVkZ2VzKCk7XG4gICAgICBxdWV1ZSA9IHF1ZXVlLmNvbmNhdChuZXh0RWRnZXMpO1xuXG4gICAgICBwYXRocyA9IHBhdGhzLmNvbmNhdChuZXh0RWRnZXMubWFwKGUgPT4gY3VyUGF0aC5hZGQoZS5jaGlsZCwgZSkpKTtcblxuICAgIH1cblxuICAgIHJldHVybiBwYXRocztcblxuICB9XG5cbiAgcHVibGljIGZpbmRFeHBsaWNpdChwYXRobmFtZTogc3RyaW5nKSB7XG5cbiAgICBjb25zdCBuYW1lcyA9IHBhdGhuYW1lLnNwbGl0KCdfXycpO1xuICAgIGxldCBub2RlOiBSZWxhdGlvbnNoaXBOb2RlID0gdGhpcztcbiAgICBsZXQgcGF0aCA9IG5ldyBSZWxhdGlvbnNoaXBQYXRoKFtub2RlXSk7XG5cbiAgICB3aGlsZSAobmFtZXMubGVuZ3RoKSB7XG5cbiAgICAgIGNvbnN0IG5hbWUgPSBuYW1lcy5zaGlmdCgpO1xuXG4gICAgICBjb25zdCBlZGdlcyA9IG5vZGUuZWRnZXMuZmlsdGVyKGVkZ2UgPT4ge1xuICAgICAgICByZXR1cm4gKGVkZ2UuaGFzQ2hpbGQobm9kZSkgJiYgZWRnZS5vcHRpb25zLm5hbWUgPT09IG5hbWUpIHx8IGVkZ2Uub3B0aW9ucy5hcyA9PT0gbmFtZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZWRnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlZGdlID0gPFJlbGF0aW9uc2hpcEVkZ2U+IGVkZ2VzLnBvcCgpO1xuICAgICAgY29uc3QgbmV4dE5vZGUgPSA8UmVsYXRpb25zaGlwTm9kZT4gZWRnZS5vcHBvc2l0ZShub2RlKTtcblxuICAgICAgLy8gbmV4dE5vZGUgY291bGQgYmUgbnVsbFxuICAgICAgcGF0aCA9IHBhdGguYWRkKG5leHROb2RlLCBlZGdlKTtcbiAgICAgIG5vZGUgPSBuZXh0Tm9kZTtcblxuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xuXG4gIH1cblxuICBwdWJsaWMgZmluZChuYW1lOiBzdHJpbmcpIHtcblxuICAgIGxldCBxdWV1ZSA9IHRoaXMuZWRnZXNcbiAgICAgIC5zbGljZSgpXG4gICAgICAubWFwKGVkZ2UgPT4ge1xuICAgICAgICByZXR1cm4ge2VkZ2U6IGVkZ2UsIHBhdGg6IG5ldyBSZWxhdGlvbnNoaXBQYXRoKFt0aGlzXSl9O1xuICAgICAgfSk7XG5cbiAgICBjb25zdCB0cmF2ZXJzZWQ6IGFueSA9IHt9O1xuXG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXG4gICAgICBjb25zdCBpdGVtID0gcXVldWVbMF07XG4gICAgICBjb25zdCBjdXJFZGdlID0gaXRlbS5lZGdlO1xuICAgICAgY29uc3QgcGF0aCA9IGl0ZW0ucGF0aDtcbiAgICAgIGxldCBub2RlOiBhbnk7XG5cbiAgICAgIHRyYXZlcnNlZFtjdXJFZGdlLmlkXSA9IHRydWU7XG5cbiAgICAgIGNvbnN0IGN1ck5vZGUgPSA8UmVsYXRpb25zaGlwTm9kZT4gcGF0aC5wYXRoWzBdO1xuICAgICAgbm9kZSA9IGN1ckVkZ2Uub3Bwb3NpdGUoY3VyTm9kZSk7XG5cbiAgICAgIGlmICgoY3VyRWRnZS5oYXNDaGlsZChjdXJOb2RlKSAmJiBjdXJFZGdlLm9wdGlvbnMubmFtZSA9PT0gbmFtZSkgfHwgY3VyRWRnZS5vcHRpb25zLmFzID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBwYXRoLmFkZChub2RlLCBjdXJFZGdlKTtcbiAgICAgIH1cblxuICAgICAgcXVldWUgPSBxdWV1ZS5zbGljZSgxKS5jb25jYXQoXG4gICAgICAgIG5vZGUuZWRnZXNcbiAgICAgICAgICAuZmlsdGVyKChlZGdlOiBSZWxhdGlvbnNoaXBFZGdlKSA9PiAhdHJhdmVyc2VkW2VkZ2UuaWRdKVxuICAgICAgICAgIC5tYXAoKGVkZ2U6IFJlbGF0aW9uc2hpcEVkZ2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGVkZ2U6IGVkZ2UsXG4gICAgICAgICAgICAgIHBhdGg6IHBhdGguYWRkKG5vZGUsIGN1ckVkZ2UpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBSZWxhdGlvbnNoaXBFZGdlIHtcblxuICBwdWJsaWMgaWQ6IG51bWJlcjtcbiAgcHVibGljIHBhcmVudDogUmVsYXRpb25zaGlwTm9kZTtcbiAgcHVibGljIGNoaWxkOiBSZWxhdGlvbnNoaXBOb2RlO1xuICBwdWJsaWMgb3B0aW9uczogSU9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBSZWxhdGlvbnNoaXBOb2RlLCBjaGlsZDogUmVsYXRpb25zaGlwTm9kZSwgb3B0aW9uczogSU9wdGlvbnMpIHtcblxuICAgIHRoaXMuaWQgPSArK19faWRfXztcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmNoaWxkID0gY2hpbGQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHBhcmVudC5lZGdlcy5wdXNoKHRoaXMpO1xuICAgIGNoaWxkLmVkZ2VzLnB1c2godGhpcyk7XG5cbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYFtFZGdlOiAke3RoaXMucGFyZW50Lk1vZGVsLm5hbWV9LCAke3RoaXMuY2hpbGQuTW9kZWwubmFtZX1dYDtcbiAgfVxuXG4gIHB1YmxpYyBoYXNDaGlsZChjaGlsZDogUmVsYXRpb25zaGlwTm9kZSkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkID09PSBjaGlsZDtcbiAgfVxuXG4gIHB1YmxpYyBoYXNQYXJlbnQocGFyZW50OiBSZWxhdGlvbnNoaXBOb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50ID09PSBwYXJlbnQ7XG4gIH1cblxuICBwdWJsaWMgb3Bwb3NpdGUobm9kZTogUmVsYXRpb25zaGlwTm9kZSkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkID09PSBub2RlID8gdGhpcy5wYXJlbnQgOiAodGhpcy5wYXJlbnQgPT09IG5vZGUgPyB0aGlzLmNoaWxkIDogbnVsbCk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWxhdGlvbnNoaXBHcmFwaCB7XG5cbiAgcHVibGljIG5vZGVzOiBSZWxhdGlvbnNoaXBOb2RlW107XG4gIHB1YmxpYyBlZGdlczogUmVsYXRpb25zaGlwRWRnZVtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgICB0aGlzLmVkZ2VzID0gW107XG4gIH1cblxuICBwdWJsaWMgb2YobU1vZGVsOiB0eXBlb2YgTW9kZWwpIHtcblxuICAgIGxldCBub2RlID0gdGhpcy5ub2Rlcy5maWx0ZXIobiA9PiBuLk1vZGVsID09PSBtTW9kZWwpLnBvcCgpO1xuICAgIGlmICghbm9kZSkge1xuICAgICAgbm9kZSA9IG5ldyBSZWxhdGlvbnNoaXBOb2RlKHRoaXMsIG1Nb2RlbCk7XG4gICAgICB0aGlzLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG5cbiAgfVxuXG59XG4iXX0=
